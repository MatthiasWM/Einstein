#!newt

Require("NativeCalls");

// This is an example for the NativeCalls interface.
// Cf README file for more details and documentation.

begin
	// In this example, we'll access three functions of libc, one
	// of libm and four of libcurses.
	// (you therefore need libc, libm and libcurses for it to work).

	local libc := OpenNativeLibrary("libc");
	libc:DefGlobalFn(
		'|libc.gethostname|,
		{name: "gethostname",
		args: ['string, 'sint32],
		result: 'sint32});
	libc:DefGlobalFn(
		'|libc.socket|,
		{name: "socket",
		args: ['sint32, 'sint32, 'sint32],
		result: 'sint32});
/*
-- This is on BSD systems. On some systems, there is no sin_len field.
struct sockaddr_in {
  uint8_t         sin_len;      // length of structure (16)
  sa_family_t     sin_family;   // AF_INET
  in_port_t       sin_port;     // 16-bit TCP or UDP port number
                                // network byte ordered
  struct in_addr  sin_addr;     // 32-bit IPv4 address
                                // network byte ordered
  char            sin_zero[8];  // unused
};
*/
	libc:DefGlobalFn(
		'|libc.bind_ipv4|,
		{name: "bind",
		args: ['sint32, ['uint8, 'uint8, 'uint16, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8], 'sint32],
		result: 'sint32});
	libc:DefGlobalFn(
		'|libc.connect_ipv4|,
		{name: "connect",
		args: ['sint32, ['uint8, 'uint8, 'uint16, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8, 'uint8], 'sint32],
		result: 'sint32});
	libc:DefGlobalFn(
		'|libc.write|,
		{name: "write",
		args: ['sint32, 'string, 'sint32],
		result: 'sint32});
	libc:DefGlobalFn(
		'|libc.read|,
		{name: "read",
		args: ['sint32, 'string, 'sint32],
		result: 'sint32});
	libc:DefGlobalFn(
		'|libc.close|,
		{name: "close",
		args: ['sint32],
		result: 'sint32});
	libc:DefGlobalFn(
		'|libc.popen|,
		{name: "popen",
		args: ['string, 'string],
		result: 'sint32});
	libc:DefGlobalFn(
		'|libc.pclose|,
		{name: "pclose",
		args: ['sint32],
		result: 'sint32});

	local libm := OpenNativeLibrary("libm");
	libm:DefGlobalFn(
		'|libm.cos|,
		{name: "cos",
		args: ['double],
		result: 'double});

	local libcurses := OpenNativeLibrary("libcurses");
	libcurses:DefGlobalFn(
		'|libcurses.initscr|,
		{name: "initscr",
		args: [],
		result: 'pointer});
	libcurses:DefGlobalFn(
		'|libcurses.cbreak|,
		{name: "cbreak",
		args: [],
		result: 'sint32});
	libcurses:DefGlobalFn(
		'|libcurses.noecho|,
		{name: "noecho",
		args: [],
		result: 'sint32});
	libcurses:DefGlobalFn(
		'|libcurses.flash|,
		{name: "flash",
		args: [],
		result: 'sint32});
	libcurses:DefGlobalFn(
		'|libcurses.endwin|,
		{name: "endwin",
		args: [],
		result: 'sint32});

	// strings aren't in unicode??
	local hostname := MakeBinary(256, 'string);

	// Get the hostname using gethostname.
	local result := |libc.gethostname|(hostname, Length(hostname));

	if (result = 0) then
		Print("hostname: " & hostname & "\n")
	else
		Print("gethostname returned an error (" & GetErrno() & ")\n");

	// Open a socket.
	constant AF_INET := 2;
	constant SOCK_STREAM := 1;
	constant PF_UNSPEC := 0;
	local socket := |libc.socket|(AF_INET, SOCK_STREAM, PF_UNSPEC);

	if (socket < 0)
	then begin
		Print("socket returned an error (" & GetErrno() & ")\n");
	end else begin
		try
			Print("socket fd: " & socket & "\n");
			
			result := |libc.bind_ipv4|(socket, [
				16 /* length */,
				AF_INET,
				0, /* port: any */
				0, 0, 0, 0, /* address: any */
				0, 0, 0, 0, /* zero */
				0, 0, 0, 0  /* zero */], 16);
	
			if (result < 0) then
			begin
				Throw('|evt.native-errno;type.ref.string|, "bind");
			end;
	
			result := |libc.connect_ipv4|(socket, [
				16 /* length */,
				AF_INET,
				80,
				66, 249, 89, 104, /* address */	// Google.
				0, 0, 0, 0, /* zero */
				0, 0, 0, 0 /* zero */], 16);
	
			if (result < 0) then
			begin
				Throw('|evt.native-errno;type.ref.string|, "connect");
			end;

			result := |libc.write|(socket, "GET / HTTP/1.0\n\n", 16);
	
			if (result < 0) then
			begin
				Throw('|evt.native-errno;type.ref.string|, "write");
			end;

			local data := MakeBinary(512, 'string);
			result := |libc.read|(socket, data, 512);
			P(data);
	
			if (result < 0) then
			begin
				Throw('|evt.native-errno;type.ref.string|, "read");
			end;
			
		onexception |evt.native-errno| do
		begin
			Print("An error occurred with function " &
				CurrentException().data & " (" &
				GetErrno() & ")\n");
		end;

		// Close the socket.
		result := |libc.close|(socket);
		
		if (result < 0) then
		begin
			Print("close returned an error (" & GetErrno() & ")\n");
		end;
	end;

	Print("Cos 0.0 is:\n");
	Print(|libm.cos|(0.0));
	Print("\n");

	// init ncurses
	|libcurses.initscr|();
	|libcurses.noecho|();
	|libcurses.cbreak|();
	
	// flash
	|libcurses.flash|();
	
	// end of ncurses
	|libcurses.endwin|();

	// call open(1)
	local popenref := |libc.popen|("open /Applications/TextEdit.app/", "r");
	|libc.pclose|(popenref);

	libm:Close();
	libc:Close();
	libcurses:Close();

	return nil;
end;
